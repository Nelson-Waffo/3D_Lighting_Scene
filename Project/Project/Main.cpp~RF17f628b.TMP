#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <stb/stb_image.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include "Shader.h"
#include "Textures.h"
#include "Camera.h"
#include <glm/gtc/type_ptr.hpp>
#include <vector>
#include <string>
#include "DataSource.h"
#include "model.h"
#include <map>

using namespace std;

/*constants and global variables*/
//global path for models
string path = "C:/Users/nelso/Documents/ComputerScience/Semester-7/Computer_Graphics/CG_Course_2020/Rehearsal_OpenGL/Scene3D/models";
//global variables for rotations
float bend = 1.0;
float rotationSpeed = 0.5f;
float dir = 1.0f;
// window dimensions
const unsigned int WIDTH = 1200;
const unsigned int HEIGHT = 800;
// shader code
const char* fragment_cube_path = "fragmentcube.shader";
const char* vertex_cube_path = "vertexcube.shader";
const char* vertex_light_path = "vertexlight.shader";
const char* fragment_light_path = "fragmentlight.shader";
const char* vertex_model_path = "vertexmodel.shader";
const char* fragment_model_path = "fragmentmodel.shader";
// textures: specular and diffuse maps
const char* Diffuse = "material.diffuse";
const char* Specular = "material.specular";
const char* Shininess = "material.shininess";

// timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;
// camera object
Camera camera(glm::vec3(0.0, 10.0, 270.0));
float lastX = WIDTH / 2.0f;
float lastY = HEIGHT / 2.0f;
bool firstMouse = true;
/*end of constants and global variables*/

/****function prototypes*****/
bool initialise(GLFWwindow*&);
void resize_window(GLFWwindow*, int, int);
void process_events(GLFWwindow*);
void process_camera(GLFWwindow*);
void mouse_callback(GLFWwindow*, double, double);
void scroll_callback(GLFWwindow*, double, double);

/*end of prototypes*/

int main()
{
	cout << "everything is fine." << endl;
	// initialise GLFW
	GLFWwindow* window;
	if (!initialise(window)) {
		return -1;
	}

	// opengl functions can be used. first inform open of the size of the window 
	glViewport(0, 0, WIDTH, HEIGHT);
	// update opengl each time the user resizes the window: through a callback function
	glfwSetFramebufferSizeCallback(window, resize_window);

	// enable the depth buffer for depth testing: if a fragment is in front of another fragment it overwrites that other fragment
	// if it is behind, it gets discarded
	glEnable(GL_DEPTH_TEST);

	// store cube data in the gpu's memory for the vertex and fragment shaders
	unsigned int vao;
	unsigned int vbo;
	DataSource::store_cube_data(vao, vbo);

	// load and create a texture
    // create a variable to store the id of the texture object
	unsigned int spec_texture;
	Textures::generate_texture(spec_texture, "specular_map.png", GL_RGBA);

	// compile the shaders and create a shader program object
	Shader cubeshader(vertex_cube_path, fragment_cube_path);
	Shader lightshader(vertex_light_path, fragment_light_path);
	Shader modelshader(vertex_model_path, fragment_model_path);

	// loading a model
	path += "/spiderman-scene-obj/spiderman-scene.obj";
	Model object(path);
	object.Draw(modelshader);
	// structure for models
	map<Model, Element> models;
	models.insert(pair<Model, Element>(object, { glm::vec3(0.0, 0.0, 0.0), 45.0, 5.0, 5.0, 5.0, 0 }));
	// models[object] = {glm::vec3(0.0, 0.0, 0.0), 45.0, 5.0, 5.0, 5.0, 0};
    
	// textures
	glUseProgram(cubeshader.ID);
	// diffuse map texture: texture bound to texture unit 0
	glUniform1i(glGetUniformLocation(cubeshader.ID, Diffuse), 0);
	// specular map texture: texture bound to texture unit 1
	glUniform1i(glGetUniformLocation(cubeshader.ID, Specular), 1);
	// shininess
	glUniform1f(glGetUniformLocation(cubeshader.ID, Shininess), 32);

	// matrices
	// projection matrix: perspective matrix
	glm::mat4 projection = glm::perspective(camera.Zoom, (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);
	glUniformMatrix4fv(glGetUniformLocation(cubeshader.ID, "projection"), 1, GL_FALSE, glm::value_ptr(projection));
	// view matrix
	glm::mat4 view = glm::mat4(1.0);
	// model matrix
	glm::mat4 model = glm::mat4(1.0);
	// normal matrix
	glm::mat3 normalMatrix;

	// display data
	// data structure for the lights
	vector<Element> lights = DataSource::get_data(Data::Light);
	// data structure for elements on the terrain
	vector<Element> elements = DataSource::get_data(Data::Element);

	/* lighting maps*/
	// pass the light positions and other data to the fragment shader
	string temp;
	glm::vec3 light_colour = glm::vec3(1.0);
	for (int i = 0; i < lights.size(); ++i) {
		temp = "lights[" + to_string(i) + "].position";
		glUniform3fv(glGetUniformLocation(cubeshader.ID, temp.c_str()), 1, glm::value_ptr(lights[i].translation));
		temp = "lights[" + to_string(i) + "].ambient";
		glUniform3fv(glGetUniformLocation(cubeshader.ID, temp.c_str()), 1, glm::value_ptr(0.2f * light_colour));
		temp = "lights[" + to_string(i) + "].diffuse";
		glUniform3fv(glGetUniformLocation(cubeshader.ID, temp.c_str()), 1, glm::value_ptr(0.9f * light_colour));
		temp = "lights[" + to_string(i) + "].specular";
		glUniform3fv(glGetUniformLocation(cubeshader.ID, temp.c_str()), 1, glm::value_ptr(0.9f * light_colour));
		// attenuation components
		temp = "lights[" + to_string(i) + "].constant";
		glUniform1f(glGetUniformLocation(cubeshader.ID, temp.c_str()), 1.0);
		temp = "lights[" + to_string(i) + "].lineare";
		glUniform1f(glGetUniformLocation(cubeshader.ID, temp.c_str()), 0.0022);
		temp = "lights[" + to_string(i) + "].quadratic";
		glUniform1f(glGetUniformLocation(cubeshader.ID, temp.c_str()), 0.00019);
	}
	// remove the flashlight because it does not need to be displayed
	lights.pop_back();
	/*end of lighting maps*/

	// render loop
	while (glfwWindowShouldClose(window) != true)
	{
		// per-frame time logic
        // --------------------
		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;
		// process window events
		process_events(window);

		// clearing colour
		glClearColor(0.0, 0.0, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glUseProgram(cubeshader.ID);
		glBindVertexArray(vao);
		// moving the camera: adjust the camera position
		process_camera(window);
		view = camera.GetViewMatrix();
		glUniformMatrix4fv(glGetUniformLocation(cubeshader.ID, "view"), 1, GL_FALSE, glm::value_ptr(view));
		// pass the camera position to the shader
		glUniform3fv(glGetUniformLocation(cubeshader.ID, "cameraPos"), 1, glm::value_ptr(camera.Position));
		// set up the flash light elements
		glUniform3fv(glGetUniformLocation(cubeshader.ID, "lights[4].position"), 1, glm::value_ptr(camera.Position));
		glUniform3fv(glGetUniformLocation(cubeshader.ID, "lights[4].direction"), 1, glm::value_ptr(camera.Front));
		// inner cutoff:12.5 and outer cutoff: 17.5
		glUniform1f(glGetUniformLocation(cubeshader.ID, "lights[4].cutoff"), glm::cos(glm::radians(12.5f)));
		glUniform1f(glGetUniformLocation(cubeshader.ID, "lights[4].outercutoff"), glm::cos(glm::radians(17.5f)));

		for (vector<Element>::iterator iter = elements.begin(); iter != elements.end(); ++iter) {
			// select the texture
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, iter->texture);
			glActiveTexture(GL_TEXTURE1);
			// the first element is the terrain: fragile solution
			if (iter->name == DataSource::terrain_name) {
				glBindTexture(GL_TEXTURE_2D, iter->texture);
			}
			else {
				glBindTexture(GL_TEXTURE_2D, spec_texture);
			}
			model = glm::mat4(1.0);
			model = glm::translate(model, iter->translation);
			model = glm::rotate(model, dir * (rotationSpeed) * (float)(glfwGetTime()) * glm::radians(iter->angle), glm::vec3(1.0, bend, 0.0));
			model = glm::scale(model, glm::vec3(iter->scaleX, iter->scaleY, iter->scaleZ));
			glUniformMatrix4fv(glGetUniformLocation(cubeshader.ID, "model"), 1, GL_FALSE, glm::value_ptr(model));
			// normal matrix to the fragment shader
			normalMatrix = glm::mat3(glm::transpose(glm::inverse(model)));
			glUniformMatrix3fv(glGetUniformLocation(cubeshader.ID, "normalMatrix"), 1, GL_FALSE, glm::value_ptr(normalMatrix));
			// issuance of the draw call: every uniform in the relevant shaders must have been fed necessary data at this point
			glDrawArrays(GL_TRIANGLES, 0, 36);
		}		
		glUseProgram(0);

		// display light bulbs
		glUseProgram(lightshader.ID);
		glUniformMatrix4fv(glGetUniformLocation(lightshader.ID, "view"), 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(glGetUniformLocation(lightshader.ID, "projection"), 1, GL_FALSE, glm::value_ptr(projection));
		for (vector<Element>::iterator iter = lights.begin(); iter != lights.end(); ++iter) {
			model = glm::mat4(1.0);
			model = glm::translate(model, iter->translation);
			model = glm::rotate(model, glm::radians(iter->angle), glm::vec3(1.0, 0.0, 0.0));
			model = glm::scale(model, glm::vec3(iter->scaleX, iter->scaleY, iter->scaleZ));
			glUniformMatrix4fv(glGetUniformLocation(lightshader.ID, "model"), 1, GL_FALSE, glm::value_ptr(model));
			glDrawArrays(GL_TRIANGLES, 0, 36);
		}

		glBindVertexArray(0);
		glUseProgram(0);

		glUseProgram(modelshader.ID);
		// pass the matrices to the vertex shader
		glUniformMatrix4fv(glGetUniformLocation(modelshader.ID, "view"), 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(glGetUniformLocation(modelshader.ID, "projection"), 1, GL_FALSE, glm::value_ptr(projection));
		// display models
		for (map<Model, Element>::iterator iter = models.begin(); iter != models.end(); ++iter)
		{
			model = glm::mat4(1.0);
			model = glm::translate(model, iter->second.translation);
			model = glm::rotate(model, glm::radians(iter->second.angle), glm::vec3(0.0, 1.0, 0.0));
			model = glm::scale(model, glm::vec3(iter->second.scaleX, iter->second.scaleY, iter->second.scaleZ));
			glUniformMatrix4fv(glGetUniformLocation(modelshader.ID, "model"), 1, GL_FALSE, glm::value_ptr(model));
			// normal matrix to the fragment shader
			normalMatrix = glm::mat3(glm::transpose(glm::inverse(model)));
			glUniformMatrix3fv(glGetUniformLocation(modelshader.ID, "normalMatrix"), 1, GL_FALSE, glm::value_ptr(normalMatrix));
			// display the model
			iter->first.Draw(modelshader);
		}
		glUseProgram(0);
		// double-buffering: the function which displays the image in the window
		glfwSwapBuffers(window);
		// a function which calls callback functions of triggered events
		glfwPollEvents();
	}

	// delete buffers
	glDeleteVertexArrays(1, &vao);
	glDeleteBuffers(1, &vbo);
	// once the loop is terminate, the application can close. first glfw allocated resources must be released
	glfwTerminate();
	return 0;
}

/*function definitions*/

// a function to initialise the display window
bool initialise(GLFWwindow* & window)
{
	// initialise glfw
	if (!glfwInit()) {
		std::cout << "GLFW failed to initialise" << std::endl;
		return false;
	}
	// configure glfw
	// make glfw fail if the opengl version installed is below 3
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	// inform glfw that the application will use opengl core profile
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// create the window
	window = glfwCreateWindow(WIDTH, HEIGHT, "3D Scene", NULL, NULL);
	// make sure the window was properly created
	if (window == 0) {
		std::cout << "the creation of the window failed." << std::endl;
		return false;
	}
	// make the window the main context of the current thread
	glfwMakeContextCurrent(window);
	// register callbacks for mouse scrolls and mouse movements
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	// tell GLFW to capture our mouse. I do not like it.
	// glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	// now GLAD can be initialised. GLAD makes it possible to use opengl functions directly in the application
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "GLAD failed to initialise" << std::endl;
		return false;
	}
	return true;
}

// a callback function which is called each time the window is being resized
void resize_window(GLFWwindow* window, int width, int height)
{
	glViewport(0, 0, width, height);
}

// a function to process certain window events
void process_events(GLFWwindow* window)
{
	// close the window when the escape button is pressed
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
	{
		glfwSetWindowShouldClose(window, true);
	}
}

// a function to process camera movements and update the camera position
void process_camera(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		camera.ProcessKeyboard(FORWARD, deltaTime);
	else if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		camera.ProcessKeyboard(BACKWARD, deltaTime);
	else if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		camera.ProcessKeyboard(LEFT, deltaTime);
	else if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		camera.ProcessKeyboard(RIGHT, deltaTime);
	// face the negative z axis by pressing T
	else if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS) {
		static float lastTime = 0;
		// toggle the yaw value per request but every 3 seconds min
		if (glfwGetTime() - lastTime > 3.0) {
			camera.Yaw = -90;
			camera.Pitch = 0;
			lastTime = glfwGetTime();
		}
	}
	// when facing the negative z axis, press G to turn back
	else if (glfwGetKey(window, GLFW_KEY_G) == GLFW_PRESS) {
		static float lastTime = 0;
		// toggle the yaw value per request but every 3 seconds min
		if (glfwGetTime() - lastTime > 3.0) {
			camera.Yaw = 90;
			camera.Pitch = 0;
			lastTime = glfwGetTime();
		}
	}
	// when facing the negative z axis, press H to turn right
	else if (glfwGetKey(window, GLFW_KEY_H) == GLFW_PRESS) {
		static float lastTime = 0;
		// toggle the yaw value per request but every 3 seconds min
		if (glfwGetTime() - lastTime > 3.0) {
			camera.Yaw = 0;
			camera.Pitch = 0;
			lastTime = glfwGetTime();
		}
	}
	// when facing the negative z axis, press F to go left
	else if (glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS) {
		static float lastTime = 0;
		// toggle the yaw value per request but every 3 seconds min
		if (glfwGetTime() - lastTime > 3.0) {
			camera.Yaw = 0;
			camera.Pitch = 180;
			lastTime = glfwGetTime();
		}
	}
}

// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	// reversed since y-coordinates go from bottom to top
	float yoffset = lastY - ypos; 

	lastX = xpos;
	lastY = ypos;

	camera.ProcessMouseMovement(xoffset, yoffset);
}

// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	camera.ProcessMouseScroll(yoffset);
}

/************************end of function definitions*******************************************************************/


/****** my lovely garbage ****/

/*
// a function which returns data
vector<Element> get_data(Data data)
{
	// load and create a texture
    // create a variable to store the id of the texture object
	unsigned int grass_texture;
	Texture::generate_texture(grass_texture, "gold.jpg", GL_RGB); // zgrass is good
	unsigned int box_texture;
	Texture::generate_texture(box_texture, "box.png", GL_RGBA);

	// data structure for the lights
	vector<Element> lights = {
		// lower left light
		{glm::vec3(-250.0f, 47.0f, 175.0f), 0.0f, 4.0, 4.0, 4.0, 0}, // 0
		// upper left light
		{glm::vec3(-180.0f, 47.0f, -250.0f), 0.0f, 4.0, 4.0, 4.0, 0}, // 1
		// upper right light
		{glm::vec3(120.0f, 39.0f, -250.0f), 0.0f, 4.0, 4.0, 4.0, 0}, // 2
		// lower right light
		{glm::vec3(250.0f, 39.0f, 175.0f), 0.0f, 4.0, 4.0, 4.0, 0}, // 3
		// flash light
		{camera.Position, 0.0f, 0.0, 0.0, 0.0, 0} // 4
	};

	// data structure for elements on the terrain
    vector<Element> elements = {
		// the terrain
		{glm::vec3(0.0f, 0.0f, 0.0f), 0.0f, 500.0f, 4.0f, 500.0f, grass_texture, terrain_name},
		// wooden boxes in the center of scene
		{glm::vec3(0.0f, 4.0f, 0.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(0.0f, 8.0f, 0.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(0.0f, 12.0f, 0.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(0.0f, 16.0f, 0.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},

		// wooden boxes at the lower right edge of the scene
		{glm::vec3(248.0f, 4.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 8.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 12.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 16.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},

		// wooden boxes at the lower left edge of the scene
		{glm::vec3(-248.0f, 4.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 8.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 12.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 16.0f, 248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},

		// wooden boxes at the top left corner of the scene
		{glm::vec3(-248.0f, 4.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 8.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 12.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(-248.0f, 16.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},

		// wooden boxes at the top right corner of the scene
		{glm::vec3(248.0f, 4.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 8.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 12.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},
		{glm::vec3(248.0f, 16.0f, -248.0f), 0.0f, 4.0, 4.0, 4.0, box_texture},

		// boxes in the lower left corner
		{glm::vec3(-200.0f, 4.5f, 200.0f), 0.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-200.0f, 4.5f, 165.0f), 0.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-165.0f, 4.5f, 200.0f), 0.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-165.0f, 4.5f, 165.0f), 0.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-190.0f, 30.5f, 166.0f), -55.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-175.0f, 32.5f, 175.0f),  45.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-200.0f, 20.5f, 188.0f), -60.0f, 5.0, 5.0, 5.0, box_texture},
		{glm::vec3(-160.0f, 23.5f, 202.0f),  57.0f, 5.0, 5.0, 5.0, box_texture},

		// boxes in the upper right corner
		{glm::vec3(100.0f, 5.0f, -200.0f), 0.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(105.0f, 5.0f, -150.0f), 0.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(140.0f, 5.0f, -199.0f), 0.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(145.0f, 5.0f, -145.0f), 0.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(125.0f, 20.5f, -181.0f),  65.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(93.0f, 28.5f, -163.0f), -55.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(115.0f, 27.5f, -188.0f),  55.0f, 6.0, 6.0, 6.0, box_texture},
		{glm::vec3(143.0f, 28.5f, -155.0f),  -62.0f, 6.0, 6.0, 6.0, box_texture}
	};

	if (data == Data::Element) {
		return elements;
	}
	else if (data == Data::Light) {
		return lights;
	}
}

// a function which stores cube data in the gpu's memory
void store_cube_data(unsigned int& vao, unsigned int& vbo)
{
	// cube data to be stored in the gpu's memory
	// array of vertices for creating a cube
	float vertices[] = {
		// vertex position   //texcoord  // normal vectors
	   -0.5f, -0.5f, -0.5f,  0.0f, 0.0f, 0.0f,  0.0f, -1.0f,
		0.5f, -0.5f, -0.5f,  1.0f, 0.0f, 0.0f,  0.0f, -1.0f,
		0.5f,  0.5f, -0.5f,  1.0f, 1.0f, 0.0f,  0.0f, -1.0f,
		0.5f,  0.5f, -0.5f,  1.0f, 1.0f, 0.0f,  0.0f, -1.0f,
		-0.5f,  0.5f, -0.5f,  0.0f, 1.0f, 0.0f,  0.0f, -1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 0.0f, 0.0f,  0.0f, -1.0f,

		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, 0.0f,  0.0f, 1.0f,
		0.5f, -0.5f,  0.5f,  1.0f, 0.0f, 0.0f,  0.0f, 1.0f,
		0.5f,  0.5f,  0.5f,  1.0f, 1.0f, 0.0f,  0.0f, 1.0f,
		0.5f,  0.5f,  0.5f,  1.0f, 1.0f, 0.0f,  0.0f, 1.0f,
		-0.5f,  0.5f,  0.5f,  0.0f, 1.0f, 0.0f,  0.0f, 1.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, 0.0f,  0.0f, 1.0f,

		-0.5f,  0.5f,  0.5f,  1.0f, 0.0f, -1.0f,  0.0f,  0.0f,
		-0.5f,  0.5f, -0.5f,  1.0f, 1.0f, -1.0f,  0.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f, -1.0f,  0.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f, -1.0f,  0.0f,  0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, -1.0f,  0.0f,  0.0f,
		-0.5f,  0.5f,  0.5f,  1.0f, 0.0f, -1.0f,  0.0f,  0.0f,

		0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 1.0f,  0.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  1.0f, 1.0f, 1.0f,  0.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 1.0f,  0.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  0.0f, 0.0f, 1.0f,  0.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 1.0f,  0.0f,  0.0f,

		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 0.0f, -1.0f,  0.0f,
		0.5f, -0.5f, -0.5f,  1.0f, 1.0f, 0.0f, -1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  1.0f, 0.0f, 0.0f, -1.0f,  0.0f,
		0.5f, -0.5f,  0.5f,  1.0f, 0.0f, 0.0f, -1.0f,  0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, 0.0f, -1.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 0.0f, -1.0f,  0.0f,

		-0.5f,  0.5f, -0.5f,  0.0f, 1.0f, 0.0f,  1.0f,  0.0f,
		0.5f,  0.5f, -0.5f,  1.0f, 1.0f, 0.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,
		0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 0.0f,  1.0f,  0.0f,
	   -0.5f,  0.5f,  0.5f,  0.0f, 0.0f, 0.0f,  1.0f,  0.0f,
	   -0.5f,  0.5f, -0.5f,  0.0f, 1.0f, 0.0f,  1.0f,  0.0f
	};

	glGenVertexArrays(1, &vao);
	// bind it
	glBindVertexArray(vao);
	// 1 vbo
	glGenBuffers(1, &vbo);
	glBindBuffer(GL_ARRAY_BUFFER, vbo);
	// store the data in the gpu's memory
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_DYNAMIC_DRAW);
	// data is now on the gpu's memmory
	// tell opengl how to interpret the data
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(0 * sizeof(float)));
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	// normals
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(5 * sizeof(float)));
	glEnableVertexAttribArray(2);
}
*/

// camera movement

//move_camera(window, cameraPos, cameraFront);
// cameraPos + cameraFront // ensures that however we move the camera still looks in the target direction
// view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);

// components
/*glm::vec3 cameraPos = glm::vec3(250.0, 10.0, 270.0);
glm::vec3 cameraFront = glm::vec3(0.0, 0.0, -1.0);
glm::vec3 cameraUp = glm::vec3(0.0, 1.0, 0.0);*/

/*
// enum class for camera direction
enum class Direction {
	Front, Back
};

// a function used to move the camera
void move_camera(GLFWwindow* window, glm::vec3& cameraPos, glm::vec3& cameraFront)
{

	static Direction cameraDirection = Direction::Front;

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
	{
		if (cameraDirection == Direction::Front)
		{
			cameraPos.z -= 0.01f;
		}
		else
		{
			cameraPos.z += 0.01f;
		}

	}
	else if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
	{
		if (cameraDirection == Direction::Front)
		{
			cameraPos.z += 0.01f;
		}
		else
		{
			cameraPos.z -= 0.01f;
		}
	}

	else if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
	{
		if (cameraDirection == Direction::Front)
		{
			cameraPos.x -= 0.01f;
		}
		else
		{
			cameraPos.x += 0.01f;
		}
	}
	else if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
	{
		if (cameraDirection == Direction::Front)
		{
			cameraPos.x += 0.01f;
		}
		else
		{
			cameraPos.x -= 0.01f;
		}
	}
	else if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
	{
		if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_RELEASE) {
			// toggle the direction
			cameraDirection = (cameraDirection == Direction::Front) ? Direction::Back : Direction::Front;
			cameraFront.z *= -1;
		}
	}

}
*/

// terrain
	// terrain properties

	/*glm::vec3 terrain_position = glm::vec3(0.0, 0.0, 0.0);
	float terrain_scale = 10 * 50;
	float terrain_angle = 0.0f;
	// position the cube in the world
	model = glm::translate(model, terrain_position);
	model = glm::rotate(model, glm::radians(terrain_angle), glm::vec3(1.0, 0.0, 0.0));
	 model = glm::scale(model, glm::vec3(terrain_scale, 4.0, terrain_scale));
	 glUniformMatrix4fv(glGetUniformLocation(shader1.ID, "model"), 1, GL_FALSE, glm::value_ptr(model));*/

/*
	// randomize the rotation
	// generate a random number between 0 and 99
	random = rand() % 100;
	// adjust the rotations
	if (random % 3 == 0) {
		dir = -1.0;
		rotationSpeed = 0.7;
		bend = 1.0;
	}
	else {
		dir = 1.0;
		rotationSpeed = 0.4;
		bend = 0.0;
	}
*/

/*else if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS) {
	static float lastTime = 0;
	// toggle the yaw value per request but every 5 seconds min
	if (glfwGetTime() - lastTime > 5.0) {
		camera.Yaw *= -1;
		lastTime = glfwGetTime();
	}
}*/

// void move_camera(GLFWwindow*, glm::vec3&, glm::vec3&);

/* data structures */
// structure of an element in the scene
/*
struct Element {
	glm::vec3 translation;
	float angle;
	float scaleX;
	float scaleY;
	float scaleZ;
	unsigned int texture;
	const char* name = "";
};

enum class Data {
	Element, Light
};
const char* terrain_name = "terrain";
*/

// feed the grass uniform sampler2D object in the fragment shader of the terrain
//glUniform1i(glGetUniformLocation(cubeshader.ID, SAMPLER2D1), 0);
// void store_cube_data(unsigned int&, unsigned int&);
// vector<Element> get_data(Data);
/*end of data structures*/

/*end of garbage*/